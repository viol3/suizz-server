"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var EnokiClient_exports = {};
__export(EnokiClient_exports, {
  EnokiClient: () => EnokiClient,
  EnokiClientError: () => EnokiClientError
});
module.exports = __toCommonJS(EnokiClient_exports);
var _version, _apiUrl, _apiKey, _EnokiClient_instances, fetch_fn;
const DEFAULT_API_URL = "https://api.enoki.mystenlabs.com";
const ZKLOGIN_HEADER = "zklogin-jwt";
class EnokiClientError extends Error {
  constructor(status, response) {
    let errors;
    try {
      const parsedResponse = JSON.parse(response);
      errors = parsedResponse.errors;
    } catch (e) {
    }
    const cause = errors?.[0] ? new Error(errors[0].message) : void 0;
    super(`Request to Enoki API failed (status: ${status})`, {
      cause
    });
    this.errors = [];
    this.errors = errors ?? [];
    this.name = "EnokiClientError";
    this.status = status;
    this.code = errors?.[0]?.code ?? "unknown_error";
  }
}
class EnokiClient {
  constructor(config) {
    __privateAdd(this, _EnokiClient_instances);
    __privateAdd(this, _version);
    __privateAdd(this, _apiUrl);
    __privateAdd(this, _apiKey);
    __privateSet(this, _version, "v1");
    __privateSet(this, _apiUrl, config.apiUrl ?? DEFAULT_API_URL);
    __privateSet(this, _apiKey, config.apiKey);
  }
  getApp(_input) {
    return __privateMethod(this, _EnokiClient_instances, fetch_fn).call(this, "app", {
      method: "GET"
    });
  }
  getZkLogin(input) {
    return __privateMethod(this, _EnokiClient_instances, fetch_fn).call(this, "zklogin", {
      method: "GET",
      headers: {
        [ZKLOGIN_HEADER]: input.jwt
      }
    });
  }
  getZkLoginAddresses(input) {
    return __privateMethod(this, _EnokiClient_instances, fetch_fn).call(this, "zklogin/addresses", {
      method: "GET",
      headers: {
        [ZKLOGIN_HEADER]: input.jwt
      }
    });
  }
  createZkLoginNonce(input) {
    return __privateMethod(this, _EnokiClient_instances, fetch_fn).call(this, "zklogin/nonce", {
      method: "POST",
      body: JSON.stringify({
        network: input.network,
        ephemeralPublicKey: input.ephemeralPublicKey.toSuiPublicKey(),
        additionalEpochs: input.additionalEpochs
      })
    });
  }
  createZkLoginZkp(input) {
    return __privateMethod(this, _EnokiClient_instances, fetch_fn).call(this, "zklogin/zkp", {
      method: "POST",
      headers: {
        [ZKLOGIN_HEADER]: input.jwt
      },
      body: JSON.stringify({
        network: input.network,
        ephemeralPublicKey: input.ephemeralPublicKey.toSuiPublicKey(),
        maxEpoch: input.maxEpoch,
        randomness: input.randomness
      })
    });
  }
  createSponsoredTransaction(input) {
    return __privateMethod(this, _EnokiClient_instances, fetch_fn).call(this, "transaction-blocks/sponsor", {
      method: "POST",
      headers: input.jwt ? {
        [ZKLOGIN_HEADER]: input.jwt
      } : {},
      body: JSON.stringify({
        sender: input.sender,
        network: input.network,
        transactionBlockKindBytes: input.transactionKindBytes,
        allowedAddresses: input.allowedAddresses,
        allowedMoveCallTargets: input.allowedMoveCallTargets
      })
    });
  }
  executeSponsoredTransaction(input) {
    return __privateMethod(this, _EnokiClient_instances, fetch_fn).call(this, `transaction-blocks/sponsor/${input.digest}`, {
      method: "POST",
      body: JSON.stringify({
        signature: input.signature
      })
    });
  }
  getSubnames(input) {
    const query = new URLSearchParams();
    if (input.address) {
      query.set("address", input.address);
    }
    if (input.network) {
      query.set("network", input.network);
    }
    if (input.domain) {
      query.set("domain", input.domain);
    }
    return __privateMethod(this, _EnokiClient_instances, fetch_fn).call(this, "subnames" + (query.size > 0 ? `?${query.toString()}` : ""), {
      method: "GET"
    });
  }
  createSubname(input) {
    return __privateMethod(this, _EnokiClient_instances, fetch_fn).call(this, "subnames", {
      method: "POST",
      headers: input.jwt ? {
        [ZKLOGIN_HEADER]: input.jwt
      } : {},
      body: JSON.stringify({
        network: input.network,
        domain: input.domain,
        subname: input.subname,
        targetAddress: input.targetAddress
      })
    });
  }
  deleteSubname(input) {
    __privateMethod(this, _EnokiClient_instances, fetch_fn).call(this, "subnames", {
      method: "DELETE",
      body: JSON.stringify({
        network: input.network,
        domain: input.domain,
        subname: input.subname
      })
    });
  }
}
_version = new WeakMap();
_apiUrl = new WeakMap();
_apiKey = new WeakMap();
_EnokiClient_instances = new WeakSet();
fetch_fn = async function(path, init) {
  const res = await fetch(`${__privateGet(this, _apiUrl)}/${__privateGet(this, _version)}/${path}`, {
    ...init,
    headers: {
      ...init.headers,
      Authorization: `Bearer ${__privateGet(this, _apiKey)}`,
      "Content-Type": "application/json",
      "Request-Id": crypto.randomUUID()
    }
  });
  if (!res.ok) {
    throw new EnokiClientError(res.status, await res.text());
  }
  const { data } = await res.json();
  return data;
};
//# sourceMappingURL=index.js.map
