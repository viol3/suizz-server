{
  "version": 3,
  "sources": ["../../../src/EnokiClient/index.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type {\n\tCreateSponsoredTransactionApiInput,\n\tCreateSponsoredTransactionApiResponse,\n\tCreateSubnameApiInput,\n\tCreateSubnameApiResponse,\n\tCreateZkLoginNonceApiInput,\n\tCreateZkLoginNonceApiResponse,\n\tCreateZkLoginZkpApiInput,\n\tCreateZkLoginZkpApiResponse,\n\tDeleteSubnameApiInput,\n\tDeleteSubnameApiResponse,\n\tExecuteSponsoredTransactionApiInput,\n\tExecuteSponsoredTransactionApiResponse,\n\tGetAppApiInput,\n\tGetAppApiResponse,\n\tGetSubnamesApiInput,\n\tGetSubnamesApiResponse,\n\tGetZkLoginAddressesApiInput,\n\tGetZkLoginAddressesApiResponse,\n\tGetZkLoginApiInput,\n\tGetZkLoginApiResponse,\n} from './type.js';\n\nconst DEFAULT_API_URL = 'https://api.enoki.mystenlabs.com';\nconst ZKLOGIN_HEADER = 'zklogin-jwt';\n\nexport interface EnokiClientConfig {\n\t/** The API key for the Enoki app, available in the Enoki Portal. */\n\tapiKey: string;\n\n\t/** The API URL for Enoki. In most cases, this should not be set. */\n\tapiUrl?: string;\n}\n\nexport class EnokiClientError extends Error {\n\terrors: { code: string; message: string; data: unknown }[] = [];\n\tstatus: number;\n\tcode: string;\n\n\tconstructor(status: number, response: string) {\n\t\tlet errors;\n\t\ttry {\n\t\t\tconst parsedResponse = JSON.parse(response) as {\n\t\t\t\terrors: { code: string; message: string; data: unknown }[];\n\t\t\t};\n\t\t\terrors = parsedResponse.errors;\n\t\t} catch (e) {\n\t\t\t// Ignore\n\t\t}\n\t\tconst cause = errors?.[0] ? new Error(errors[0].message) : undefined;\n\t\tsuper(`Request to Enoki API failed (status: ${status})`, {\n\t\t\tcause,\n\t\t});\n\t\tthis.errors = errors ?? [];\n\t\tthis.name = 'EnokiClientError';\n\t\tthis.status = status;\n\t\tthis.code = errors?.[0]?.code ?? 'unknown_error';\n\t}\n}\n\n/**\n * A low-level client for interacting with the Enoki API.\n */\nexport class EnokiClient {\n\t#version: string;\n\t#apiUrl: string;\n\t#apiKey: string;\n\n\tconstructor(config: EnokiClientConfig) {\n\t\tthis.#version = 'v1';\n\t\tthis.#apiUrl = config.apiUrl ?? DEFAULT_API_URL;\n\t\tthis.#apiKey = config.apiKey;\n\t}\n\n\tgetApp(_input?: GetAppApiInput) {\n\t\treturn this.#fetch<GetAppApiResponse>('app', {\n\t\t\tmethod: 'GET',\n\t\t});\n\t}\n\n\tgetZkLogin(input: GetZkLoginApiInput) {\n\t\treturn this.#fetch<GetZkLoginApiResponse>('zklogin', {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t[ZKLOGIN_HEADER]: input.jwt,\n\t\t\t},\n\t\t});\n\t}\n\n\tgetZkLoginAddresses(input: GetZkLoginAddressesApiInput) {\n\t\treturn this.#fetch<GetZkLoginAddressesApiResponse>('zklogin/addresses', {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t[ZKLOGIN_HEADER]: input.jwt,\n\t\t\t},\n\t\t});\n\t}\n\n\tcreateZkLoginNonce(input: CreateZkLoginNonceApiInput) {\n\t\treturn this.#fetch<CreateZkLoginNonceApiResponse>('zklogin/nonce', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({\n\t\t\t\tnetwork: input.network,\n\t\t\t\tephemeralPublicKey: input.ephemeralPublicKey.toSuiPublicKey(),\n\t\t\t\tadditionalEpochs: input.additionalEpochs,\n\t\t\t}),\n\t\t});\n\t}\n\n\tcreateZkLoginZkp(input: CreateZkLoginZkpApiInput) {\n\t\treturn this.#fetch<CreateZkLoginZkpApiResponse>('zklogin/zkp', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t[ZKLOGIN_HEADER]: input.jwt,\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tnetwork: input.network,\n\t\t\t\tephemeralPublicKey: input.ephemeralPublicKey.toSuiPublicKey(),\n\t\t\t\tmaxEpoch: input.maxEpoch,\n\t\t\t\trandomness: input.randomness,\n\t\t\t}),\n\t\t});\n\t}\n\n\tcreateSponsoredTransaction(input: CreateSponsoredTransactionApiInput) {\n\t\treturn this.#fetch<CreateSponsoredTransactionApiResponse>('transaction-blocks/sponsor', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: input.jwt\n\t\t\t\t? {\n\t\t\t\t\t\t[ZKLOGIN_HEADER]: input.jwt,\n\t\t\t\t\t}\n\t\t\t\t: {},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tsender: input.sender,\n\t\t\t\tnetwork: input.network,\n\t\t\t\ttransactionBlockKindBytes: input.transactionKindBytes,\n\t\t\t\tallowedAddresses: input.allowedAddresses,\n\t\t\t\tallowedMoveCallTargets: input.allowedMoveCallTargets,\n\t\t\t}),\n\t\t});\n\t}\n\n\texecuteSponsoredTransaction(input: ExecuteSponsoredTransactionApiInput) {\n\t\treturn this.#fetch<ExecuteSponsoredTransactionApiResponse>(\n\t\t\t`transaction-blocks/sponsor/${input.digest}`,\n\t\t\t{\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tsignature: input.signature,\n\t\t\t\t}),\n\t\t\t},\n\t\t);\n\t}\n\n\tgetSubnames(input: GetSubnamesApiInput) {\n\t\tconst query = new URLSearchParams();\n\t\tif (input.address) {\n\t\t\tquery.set('address', input.address);\n\t\t}\n\t\tif (input.network) {\n\t\t\tquery.set('network', input.network);\n\t\t}\n\t\tif (input.domain) {\n\t\t\tquery.set('domain', input.domain);\n\t\t}\n\t\treturn this.#fetch<GetSubnamesApiResponse>(\n\t\t\t'subnames' + (query.size > 0 ? `?${query.toString()}` : ''),\n\t\t\t{\n\t\t\t\tmethod: 'GET',\n\t\t\t},\n\t\t);\n\t}\n\n\tcreateSubname(input: CreateSubnameApiInput) {\n\t\treturn this.#fetch<CreateSubnameApiResponse>('subnames', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: input.jwt\n\t\t\t\t? {\n\t\t\t\t\t\t[ZKLOGIN_HEADER]: input.jwt,\n\t\t\t\t\t}\n\t\t\t\t: {},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tnetwork: input.network,\n\t\t\t\tdomain: input.domain,\n\t\t\t\tsubname: input.subname,\n\t\t\t\ttargetAddress: input.targetAddress,\n\t\t\t}),\n\t\t});\n\t}\n\n\tdeleteSubname(input: DeleteSubnameApiInput) {\n\t\tthis.#fetch<DeleteSubnameApiResponse>('subnames', {\n\t\t\tmethod: 'DELETE',\n\t\t\tbody: JSON.stringify({\n\t\t\t\tnetwork: input.network,\n\t\t\t\tdomain: input.domain,\n\t\t\t\tsubname: input.subname,\n\t\t\t}),\n\t\t});\n\t}\n\n\tasync #fetch<T = unknown>(path: string, init: RequestInit): Promise<T> {\n\t\tconst res = await fetch(`${this.#apiUrl}/${this.#version}/${path}`, {\n\t\t\t...init,\n\t\t\theaders: {\n\t\t\t\t...init.headers,\n\t\t\t\tAuthorization: `Bearer ${this.#apiKey}`,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Request-Id': crypto.randomUUID(),\n\t\t\t},\n\t\t});\n\n\t\tif (!res.ok) {\n\t\t\tthrow new EnokiClientError(res.status, await res.text());\n\t\t}\n\n\t\tconst { data } = await res.json();\n\n\t\treturn data as T;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
