{
  "version": 3,
  "sources": ["../../../src/wallet/types.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SuiClient } from '@mysten/sui/client';\nimport type { StandardEventsListeners, Wallet } from '@mysten/wallet-standard';\n\nimport type { EnokiClientConfig } from '../EnokiClient/index.js';\nimport type { AuthProvider, EnokiNetwork } from '../EnokiClient/type.js';\nimport type { ClientWithCoreApi, Experimental_SuiClientTypes } from '@mysten/sui/experimental';\nimport type { ZkLoginSignatureInputs } from '@mysten/sui/zklogin';\nimport type { UseStore } from 'idb-keyval';\nimport type { WritableAtom } from 'nanostores';\n\nexport type WalletEventsMap = {\n\t[E in keyof StandardEventsListeners]: Parameters<StandardEventsListeners[E]>[0];\n};\n\nexport type ZkLoginState = {\n\taddress: string;\n\tpublicKey: string;\n};\n\nexport type ZkLoginSession = {\n\tmaxEpoch: number;\n\trandomness: string;\n\texpiresAt: number;\n\tjwt?: string;\n\tproof?: ZkLoginSignatureInputs;\n};\n\nexport type EnokiSessionContext = {\n\tidbStore: UseStore;\n\tclient: ClientWithCoreApi;\n\t$zkLoginSession: WritableAtom<{ initialized: boolean; value: ZkLoginSession | null }>;\n};\n\ntype ClientConfig = {\n\t/**\n\t * A list of client instances to use when building and executing transactions.\n\t */\n\tclients: ClientWithCoreApi[];\n\n\t/**\n\t * A function that returns the current network that the application is acting on.\n\t */\n\tgetCurrentNetwork: () => Experimental_SuiClientTypes.Network;\n};\n\nexport type EnokiWalletOptions = {\n\t/**\n\t * The window features to use when opening the authorization popup.\n\t * https://developer.mozilla.org/en-US/docs/Web/API/Window/open#windowfeatures\n\t */\n\twindowFeatures?: string | (() => string);\n\n\t/**\n\t * The authentication provider to register the wallet for.\n\t */\n\tprovider: AuthProvider;\n} & AuthProviderOptions &\n\tEnokiClientConfig &\n\tClientConfig &\n\tPick<Wallet, 'name' | 'icon'>;\n\nexport type AuthProviderOptions = {\n\t/**\n\t * The OAuth client ID.\n\t */\n\tclientId: string;\n\n\t/**\n\t * The URL to redirect to after authorization.\n\t */\n\tredirectUrl?: string;\n\n\t/**\n\t * Extra parameters to include in the authorization URL.\n\t */\n\textraParams?: Record<string, string> | (() => Record<string, string>);\n};\n\nexport type RegisterEnokiWalletsOptions = {\n\t/**\n\t * Configuration for each OAuth provider.\n\t */\n\tproviders: Partial<Record<AuthProvider, AuthProviderOptions>>;\n} & Pick<EnokiWalletOptions, 'apiKey' | 'apiUrl' | 'windowFeatures'> &\n\t(\n\t\t| ClientConfig\n\t\t| {\n\t\t\t\t/**\n\t\t\t\t * The SuiClient instance to use when building and executing transactions.\n\t\t\t\t */\n\t\t\t\tclient: SuiClient;\n\n\t\t\t\t/**\n\t\t\t\t * The network to use when building and executing transactions.\n\t\t\t\t * @default 'mainnet'\n\t\t\t\t */\n\t\t\t\tnetwork?: EnokiNetwork;\n\t\t  }\n\t);\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
