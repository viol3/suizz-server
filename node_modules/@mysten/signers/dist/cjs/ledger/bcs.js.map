{
  "version": 3,
  "sources": ["../../../src/ledger/bcs.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs, TypeTagSerializer } from '@mysten/sui/bcs';\nimport type { ObjectOwner } from '@mysten/sui/client';\nimport {\n\tfromBase64,\n\tnormalizeStructTag,\n\tnormalizeSuiAddress,\n\tparseStructTag,\n} from '@mysten/sui/utils';\n\nconst SUI_FRAMEWORK_ADDRESS = normalizeSuiAddress('0x2');\nconst SUI_SYSTEM_ADDRESS = normalizeSuiAddress('0x3');\n\nconst MoveObjectType = bcs.enum('MoveObjectType', {\n\tOther: bcs.StructTag,\n\tGasCoin: null,\n\tStakedSui: null,\n\tCoin: bcs.TypeTag,\n});\n\nexport const SuiMoveObject = bcs.struct('SuiMoveObject', {\n\tdata: bcs.enum('Data', {\n\t\tMoveObject: bcs.struct('MoveObject', {\n\t\t\ttype: MoveObjectType.transform({\n\t\t\t\tinput: (objectType: string): typeof MoveObjectType.$inferType => {\n\t\t\t\t\tconst structTag = parseStructTag(objectType);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tstructTag.address === SUI_FRAMEWORK_ADDRESS &&\n\t\t\t\t\t\tstructTag.module === 'coin' &&\n\t\t\t\t\t\tstructTag.name === 'Coin' &&\n\t\t\t\t\t\ttypeof structTag.typeParams[0] === 'object'\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst innerStructTag = structTag.typeParams[0];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tinnerStructTag.address === SUI_FRAMEWORK_ADDRESS &&\n\t\t\t\t\t\t\tinnerStructTag.module === 'sui' &&\n\t\t\t\t\t\t\tinnerStructTag.name === 'SUI'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn { GasCoin: true, $kind: 'GasCoin' };\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn { Coin: normalizeStructTag(innerStructTag), $kind: 'Coin' };\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tstructTag.address === SUI_SYSTEM_ADDRESS &&\n\t\t\t\t\t\tstructTag.module === 'staking_pool' &&\n\t\t\t\t\t\tstructTag.name === 'StakedSui'\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn { StakedSui: true, $kind: 'StakedSui' };\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\tOther: {\n\t\t\t\t\t\t\t...structTag,\n\t\t\t\t\t\t\ttypeParams: structTag.typeParams.map((typeParam) => {\n\t\t\t\t\t\t\t\treturn TypeTagSerializer.parseFromStr(normalizeStructTag(typeParam));\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t$kind: 'Other',\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t}),\n\t\t\thasPublicTransfer: bcs.bool(),\n\t\t\tversion: bcs.u64(),\n\t\t\tcontents: bcs.byteVector().transform({ input: fromBase64 }),\n\t\t}),\n\t}),\n\towner: bcs.Owner.transform({\n\t\tinput: (objectOwner: ObjectOwner) => {\n\t\t\tif (objectOwner === 'Immutable') {\n\t\t\t\treturn { Immutable: null };\n\t\t\t} else if ('Shared' in objectOwner) {\n\t\t\t\treturn { Shared: { initialSharedVersion: objectOwner.Shared.initial_shared_version } };\n\t\t\t} else if ('ConsensusAddressOwner' in objectOwner) {\n\t\t\t\treturn {\n\t\t\t\t\tConsensusAddressOwner: {\n\t\t\t\t\t\towner: objectOwner.ConsensusAddressOwner.owner,\n\t\t\t\t\t\tstartVersion: objectOwner.ConsensusAddressOwner.start_version,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn objectOwner;\n\t\t},\n\t}),\n\tpreviousTransaction: bcs.ObjectDigest,\n\tstorageRebate: bcs.u64(),\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,iBAAuC;AAEvC,mBAKO;AAEP,MAAM,4BAAwB,kCAAoB,KAAK;AACvD,MAAM,yBAAqB,kCAAoB,KAAK;AAEpD,MAAM,iBAAiB,eAAI,KAAK,kBAAkB;AAAA,EACjD,OAAO,eAAI;AAAA,EACX,SAAS;AAAA,EACT,WAAW;AAAA,EACX,MAAM,eAAI;AACX,CAAC;AAEM,MAAM,gBAAgB,eAAI,OAAO,iBAAiB;AAAA,EACxD,MAAM,eAAI,KAAK,QAAQ;AAAA,IACtB,YAAY,eAAI,OAAO,cAAc;AAAA,MACpC,MAAM,eAAe,UAAU;AAAA,QAC9B,OAAO,CAAC,eAAyD;AAChE,gBAAM,gBAAY,6BAAe,UAAU;AAE3C,cACC,UAAU,YAAY,yBACtB,UAAU,WAAW,UACrB,UAAU,SAAS,UACnB,OAAO,UAAU,WAAW,CAAC,MAAM,UAClC;AACD,kBAAM,iBAAiB,UAAU,WAAW,CAAC;AAC7C,gBACC,eAAe,YAAY,yBAC3B,eAAe,WAAW,SAC1B,eAAe,SAAS,OACvB;AACD,qBAAO,EAAE,SAAS,MAAM,OAAO,UAAU;AAAA,YAC1C;AACA,mBAAO,EAAE,UAAM,iCAAmB,cAAc,GAAG,OAAO,OAAO;AAAA,UAClE,WACC,UAAU,YAAY,sBACtB,UAAU,WAAW,kBACrB,UAAU,SAAS,aAClB;AACD,mBAAO,EAAE,WAAW,MAAM,OAAO,YAAY;AAAA,UAC9C;AACA,iBAAO;AAAA,YACN,OAAO;AAAA,cACN,GAAG;AAAA,cACH,YAAY,UAAU,WAAW,IAAI,CAAC,cAAc;AACnD,uBAAO,6BAAkB,iBAAa,iCAAmB,SAAS,CAAC;AAAA,cACpE,CAAC;AAAA,YACF;AAAA,YACA,OAAO;AAAA,UACR;AAAA,QACD;AAAA,MACD,CAAC;AAAA,MACD,mBAAmB,eAAI,KAAK;AAAA,MAC5B,SAAS,eAAI,IAAI;AAAA,MACjB,UAAU,eAAI,WAAW,EAAE,UAAU,EAAE,OAAO,wBAAW,CAAC;AAAA,IAC3D,CAAC;AAAA,EACF,CAAC;AAAA,EACD,OAAO,eAAI,MAAM,UAAU;AAAA,IAC1B,OAAO,CAAC,gBAA6B;AACpC,UAAI,gBAAgB,aAAa;AAChC,eAAO,EAAE,WAAW,KAAK;AAAA,MAC1B,WAAW,YAAY,aAAa;AACnC,eAAO,EAAE,QAAQ,EAAE,sBAAsB,YAAY,OAAO,uBAAuB,EAAE;AAAA,MACtF,WAAW,2BAA2B,aAAa;AAClD,eAAO;AAAA,UACN,uBAAuB;AAAA,YACtB,OAAO,YAAY,sBAAsB;AAAA,YACzC,cAAc,YAAY,sBAAsB;AAAA,UACjD;AAAA,QACD;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAAA,EACD,CAAC;AAAA,EACD,qBAAqB,eAAI;AAAA,EACzB,eAAe,eAAI,IAAI;AACxB,CAAC;",
  "names": []
}
